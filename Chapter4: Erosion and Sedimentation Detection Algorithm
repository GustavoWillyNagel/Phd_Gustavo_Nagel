var polygon = ee.Geometry.Polygon([   
  [
    [-69.44234879182393, -6.519677710712408],
    [-69.445782019363, -6.523600373626501],
    [-69.45333511994893, -6.531104512745708],
    [-69.45659668611104, -6.538437994537926],
    [-69.45436508821065, -6.53929071799918],
    [-69.44767029450948, -6.539631806976355],
    [-69.44131882356221, -6.536732543251886],
    [-69.43754227326924, -6.529569584348173],
    [-69.43668396638448, -6.523088723683271],
    [-69.43925888703878, -6.519848261912227],
    [-69.44234879182393, -6.519677710712408] // Closing the polygon
  ]
]);  // Change this polygon to fit your river bend. 

var Regiao = polygon

var feature = ee.FeatureCollection([polygon])  // Include more river bend polygons if necessary. 


var imagem = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_South_America_INT")
var imagem1 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_America")
var imagem2 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_North_America1_INT")
var imagem4 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_North2_America_INT")
var imagem5 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_Africa")
var imagem6 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_Arabia1")
var imagem7 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Africa_INT")
var imagem8 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_India_INT")
var imagem9 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_MIddle_East_INT")
var imagem10 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_India_INT")
var imagem11 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_China2")
var imagem12 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_Australia1")
var imagem13 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_Australia_INT")
var imagem14 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_Europe_INT")
var imagem15 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_China_INT")
var imagem16 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_North3_America_INT")
var imagem17 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A2_RussiaLeft_INT")
var imagem18 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_Canada")
var imagem19 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_Russia")
var imagem20 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_RussiaRight1")
var imagem21 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Russia12_INT")
var imagem22 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Russia_Ponta_INT")
var imagem23 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_Europe1")
var imagem24 = ee.Image("projects/ee-gustavoonagel/assets/PHD/A_Coast_North_Europe")


var imagem = ee.ImageCollection([imagem, imagem1, imagem2, imagem4,
                                  imagem5, imagem6, imagem7, imagem8, imagem9,
                                    imagem10, imagem11, imagem12, imagem13, imagem14, imagem15, imagem16, imagem17, imagem18, imagem19, imagem20, imagem21, imagem22,
                                    imagem23, imagem24]).mosaic().clip(feature)

var imagem25 = ee.Image("projects/ee-gustavonagel/assets/New_Cuba")
var imagem26 = ee.Image("projects/ee-gustavonagel/assets/New_North_America")
var imagem27 = ee.Image("projects/ee-gustavonagel/assets/New_Indonesia")
var imagem28 = ee.Image("projects/ee-gustavonagel/assets/New_Russia_Left")
var imagem29 = ee.Image("projects/ee-gustavonagel/assets/New_Russia_Right")

/////// Exclude Outliers 

var Outliers = ee.FeatureCollection('projects/ee-gustavonagel/assets/EXCLUIR_OUTLIERS')

var mask = ee.Image(1).clip(Outliers)   
var mask1 = ee.Image(2).where(mask, mask).eq(2)

var imagem = ee.ImageCollection([imagem, imagem25, imagem26, imagem27,
                                imagem28, imagem29]).mosaic().updateMask(mask1)

var imagem  = imagem.select(['b1', "b2"])
  .rename(['Year the Water Advanced', 'Year the Water Receded']);

var palettes = require('users/gena/packages:palettes');
var palette1 = palettes.kovesi.linear_blue_5_95_c73[7];
var palette2 = palettes.kovesi.linear_kry_5_95_c72[7];
var palette3 = palettes.matplotlib.inferno[7];

var viz = {
  min: 1984,
  max: 2022,
  palette: palette1
};

var viz1 = {
  min: 1984,
  max: 2022,
  palette: palette2
};

// Define a kernel.
//var kernel = ee.Kernel.circle({radius: 0.000000000000000000001});

var gamma = 1.5;

// Perform an erosion followed by a dilation, display.
var Advanced = imagem.select('Year the Water Advanced')
var Receded = imagem.select('Year the Water Receded')

Map.addLayer(Advanced, viz, 'Water Advanced (Year of Change)')
Map.addLayer(Receded, viz1, 'Water Receded (Year of Change)')



var Features = feature
print(Features)

Map.addLayer(Features)


var dataset = ee.Image('JRC/GSW1_4/GlobalSurfaceWater').select("max_extent").selfMask()

var RADIX = 2;  // Radix for binary (base 2) data.

    var extractQABits = function (qaBand, bitStart, bitEnd) {
      var numBits = bitEnd - bitStart + 1;
      var qaBits = qaBand.rightShift(bitStart).mod(Math.pow(RADIX, numBits));
      return qaBits;
    };

  function prepSrL8(image) {
    var cloudShadowBitMask = (1 << 3);
    var cloudsBitMask = (1 << 5);
    var snowBitMask = (1 << 5);
    var waterBitMask = (1 << 2);
    
    var qa = image.select('QA_PIXEL');
    // Both flags should be set to zero, indicating clear conditions.
    var mask = qa.bitwiseAnd(snowBitMask).eq(0);
    
    var bitStartShadowConfidence = 12;
    var bitEndShadowConfidence = 13;
    var qaBitsShadowConfidence = extractQABits(qa, bitStartShadowConfidence, bitEndShadowConfidence);
    // Test for shadows, based on the Cloud Shadow Confidence value.
    var testShadowConfidence = qaBitsShadowConfidence.gte(3).not().selfMask().rename('Hi'); 
    
              // Develop masks for unwanted pgixels (fill, cloud, cloud shadow).
              var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
              var saturationMask = image.select('QA_RADSAT').eq(0);
            
              var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
              var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
              
              return image.addBands(opticalBands, null, true)
                          .addBands(thermalBands, null, true)
                          .addBands(testShadowConfidence)
                          .updateMask(qaMask)
                          .updateMask(saturationMask)
                          .updateMask(mask)
                          .updateMask(testShadowConfidence)
                          .updateMask(dataset);
          }

//////////////////////////// Função para recortar a imagem 
var recorte = function(image) {
  // Crop by table extension
  return image.clip(Regiao).copyProperties(image);
};

//////////////////////////// mNDWI

var mNDWI = function(image){
    var mndwi = image.expression(
    '((Green) - (SWIR)) / ((Green) + (SWIR))', {
      'Blue': image.select('blue'),
      'NIR': image.select('NIR'),
      'Green': image.select('Green'),
      'Red': image.select('Red'),
      'SWIR': image.select('SWIR1'),
    });
    
  var mndwi = mndwi.rename('mndwi').updateMask(mndwi.gt(-1).and(mndwi.lt(1)));
  var mndwi = mndwi.rename('mndwi');
  
  
var ndwi = image.expression(
  '(((Green + Red) / 2) - (NIR)) / (((Green + Red) / 2) + (NIR))', {
    'SWIR1': image.select('SWIR1'),
    'NIR': image.select('NIR'),
    'Green': image.select('Green'),
    'SWIR': image.select('SWIR'),
    'Red': image.select('Red'),
  });
  
var ndwi = ndwi.rename('water').updateMask(ndwi.gt(-1).and(ndwi.lt(1)));

return mndwi.addBands(ndwi).copyProperties(image, ["system:time_start"]); 
}; 
  


//////////////////////// Function to create one band of Time

var createTimeBand = function(image) {
  // Scale milliseconds by a large constant to avoid very small slopes
  // in the linear regression output.
  return image.addBands(image.metadata('system:time_start').multiply(3.1715e-11)).copyProperties(image, ["system:time_start"]);
};

////////////////////////////// LANDSAT 9 /////////////////////////////
//////////////////////////////////////////////////////////////////////

var changeNames_L8 = function(img){
  return img.select(['SR_B2', 'SR_B3', 'SR_B4','SR_B5', 'SR_B6', 'SR_B7', "QA_PIXEL"],["blue", 'Green', 'Red','NIR', 'SWIR', 'SWIR1', "QA_PIXEL"]);
}

var Landsat_9 = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2")
                  .filterBounds(Regiao)
                  .filter(ee.Filter.lt('CLOUD_COVER', 50))
                  .map(recorte)
                  .map(prepSrL8)
                  .map(changeNames_L8)
                  .map(mNDWI)
                  .map(createTimeBand)

////////////////////////////// LANDSAT 8 /////////////////////////////
//////////////////////////////////////////////////////////////////////

var changeNames_L8 = function(img){
  return img.select(['SR_B2', 'SR_B3', 'SR_B4','SR_B5', 'SR_B6', 'SR_B7', "QA_PIXEL"],["blue", 'Green', 'Red','NIR', 'SWIR', 'SWIR1', "QA_PIXEL"]);
}

var Landsat_8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
                  .filterBounds(Regiao)
                  .filter(ee.Filter.lt('CLOUD_COVER', 50))
                  .map(recorte)
                  .map(prepSrL8)
                  .map(changeNames_L8)
                  .map(mNDWI)
                  .map(createTimeBand)
  
////////////////////////////// LANDSAT 5 /////////////////////////////
//////////////////////////////////////////////////////////////////////  

var changeNames_L5 = function(img){
  return img.select(['SR_B1', 'SR_B2', 'SR_B3','SR_B4', 'SR_B5', 'SR_B7', "QA_PIXEL"],["blue", 'Green', 'Red','NIR', 'SWIR', 'SWIR1', "QA_PIXEL"]);
}
                  
var Landsat_5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                  .filterBounds(Regiao)
                  .filter(ee.Filter.lt('CLOUD_COVER', 50))
                  .map(recorte)
                  .map(prepSrL8)
                  .map(changeNames_L5)
                  .map(mNDWI)
                  .map(createTimeBand)
                  
/////////////////////////////// Landsat 4 /////////////////////////////////
                  
                  
/////////////////////////////// Landsat 7 ///////////////////////////////////////

var Landsat_7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
                .filterBounds(Regiao)
                 .filter(ee.Filter.lt('CLOUD_COVER', 50))
                 .map(recorte)
                  .map(prepSrL8)
                  .map(changeNames_L5)
                  .map(mNDWI)
                  .map(createTimeBand)

///////////////////////////////////// MERGE ////////////////////////////
///////////////////////////////////////////////////////////////////////

var LANDSAT = Landsat_7.merge(Landsat_8).merge(Landsat_5).merge(Landsat_9).sort('system:time_start', true)

Map.addLayer(LANDSAT, {}, 'Landsat')

// Pos processing __________________________________________________________

var years = ee.List.sequence(1984, 2023, 1)

var LANDSAT_ANUAL = ee.ImageCollection.fromImages(
  years.map(function(y){
    var t1 = ee.Date.fromYMD(ee.Number(y),1,1)
    return LANDSAT
    .filter(ee.Filter.calendarRange(y, y, 'year'))
    .filter(ee.Filter.calendarRange(1, 12, 'month'))
    .median()
    .set('year', y)
    .set('system:time_start', t1.millis())
  }).flatten());
  
LANDSAT_ANUAL = LANDSAT_ANUAL.filter(ee.Filter.neq('system:band_names', []))

var LANDSAT_ANUAL = LANDSAT_ANUAL.map(function(image){
  var currentDate = ee.Date(image.get('system:time_start'));
  var meanImage = LANDSAT_ANUAL.filterDate(
                currentDate.advance(-5, 'year'), currentDate.advance(5, 'year'))
                .filter(ee.Filter.neq('system:band_names', []))
                .median()
                .set('system:time_start', image.get('system:time_start'))
                .set('year', image.get('year'))
                ;
                
  // replace all masked values:
  return meanImage;
});




// Function to get time series values for a point
var getTimeSeries = function(feature, annualCollection) {

        ///////////////////// LANDSAT ///////////////////////////
        var Regiao_Menor = feature.geometry()
        var LANDSAT_ANUAL = annualCollection
        

       var LANDSAT_ANUAL = ee.ImageCollection.fromImages(
        years.map(function(y){
          y = ee.Number(y);
          var t1 = ee.Date.fromYMD(ee.Number(y),1,1)
          
          var Dataset = LANDSAT_ANUAL.filter(ee.Filter.calendarRange(y.subtract(2), y.add(2), 'year'))
          
          var LinearFit = Dataset.select(['system:time_start', 'mndwi'])
                        .reduce(ee.Reducer.linearFit()).select('scale')
                        
          
          ////// Calculate Area 
          
          //////// 0.04
          
          var Ero_4 = LinearFit.gt(0.04).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          var Sed_4 = LinearFit.lt(-0.04).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          
          ///////// 0.06
          
          var Ero_6 = LinearFit.gt(0.06).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          var Sed_6 = LinearFit.lt(-0.06).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          
          ///////// 0.08
          
          var Ero_8 = LinearFit.gt(0.08).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          var Sed_8 = LinearFit.lt(-0.08).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          ///////// 0.1
          
          var Ero_10 = LinearFit.gt(0.1).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          var Sed_10 = LinearFit.lt(-0.1).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          /////// 0.12
          
          
          var Ero_12 = LinearFit.gt(0.12).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          var Sed_12 = LinearFit.lt(-0.12).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          
          ////// 0.14
          
          var Ero_14 = LinearFit.gt(0.14).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          
          var Sed_14 = LinearFit.lt(-0.14).selfMask().reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: Regiao_Menor,
            scale: 30,
            maxPixels: 1e9
          }).get('scale')
          

          
          
          return LinearFit//.addBands(Water.rename("Water"))
          .set('year', y)
          .set('system:time_start', t1.millis())
          
          .set('Erosion_04', ee.Number(Ero_4))
          .set('Sedimentation_04', ee.Number(Sed_4))

          .set('Erosion_06', ee.Number(Ero_6))
          .set('Sedimentation_06', ee.Number(Sed_6))
          
          .set('Erosion_08', ee.Number(Ero_8))
          .set('Sedimentation_08', ee.Number(Sed_8))
          
          .set('Erosion_10', ee.Number(Ero_10))
          .set('Sedimentation_10', ee.Number(Sed_10))
          
          .set('Erosion_12', ee.Number(Ero_12))
          .set('Sedimentation_12', ee.Number(Sed_12))
          
          .set('Erosion_14', ee.Number(Ero_14))
          .set('Sedimentation_14', ee.Number(Sed_14))
          
        }).flatten());  
        
        var Year = ee.List(LANDSAT_ANUAL.aggregate_array('year'));
        
        var erosionData_04 = ee.List(LANDSAT_ANUAL.aggregate_array('Erosion_04'));
        var sedimentationData_04 = ee.List(LANDSAT_ANUAL.aggregate_array('Sedimentation_04'));
        
        var erosionData_06 = ee.List(LANDSAT_ANUAL.aggregate_array('Erosion_06'));
        var sedimentationData_06 = ee.List(LANDSAT_ANUAL.aggregate_array('Sedimentation_06'));
      
        var erosionData_08 = ee.List(LANDSAT_ANUAL.aggregate_array('Erosion_08'));
        var sedimentationData_08 = ee.List(LANDSAT_ANUAL.aggregate_array('Sedimentation_08'));
        
        var erosionData_10 = ee.List(LANDSAT_ANUAL.aggregate_array('Erosion_10'));
        var sedimentationData_10 = ee.List(LANDSAT_ANUAL.aggregate_array('Sedimentation_10'));
        
        var erosionData_12 = ee.List(LANDSAT_ANUAL.aggregate_array('Erosion_12'));
        var sedimentationData_12 = ee.List(LANDSAT_ANUAL.aggregate_array('Sedimentation_12'));
        
        var erosionData_14 = ee.List(LANDSAT_ANUAL.aggregate_array('Erosion_14'));
        var sedimentationData_14 = ee.List(LANDSAT_ANUAL.aggregate_array('Sedimentation_14'));
                  
        
        var centroid = ee.Feature(feature.geometry().centroid()).geometry();
        
        
        return ee.Feature(feature).set({'Year': Year})
                    .set({'Sedimentation_04': sedimentationData_04})
                    .set({'Erosion_04': erosionData_04})
                    
                    .set({'Sedimentation_06': sedimentationData_06})
                    .set({'Erosion_06': erosionData_06}) 
                    
                    .set({'Sedimentation_08': sedimentationData_08})
                    .set({'Erosion_08': erosionData_08}) 
                
                    .set({'Sedimentation_10': sedimentationData_10})
                    .set({'Erosion_10': erosionData_10}) 
                    
                    .set({'Sedimentation_12': sedimentationData_12})
                    .set({'Erosion_12': erosionData_12}) 
                    
                    .set({'Sedimentation_14': sedimentationData_14})
                    .set({'Erosion_14': erosionData_14}) 
};


var exportFeatureCollection = function(featureCollection, annualCollection) {
  Features.toList(Features.size()).getInfo().forEach(function(feature, index) {
    var featureWithTimeSeries = getTimeSeries(ee.Feature(feature), LANDSAT_ANUAL);
    
    print(featureWithTimeSeries)
    
    var yearList = ee.List(featureWithTimeSeries.get('Year'))

    
    Export.table.toDrive({
      collection: ee.FeatureCollection([featureWithTimeSeries]),
      description: "sampledPointsWithTimeSeries6",
      fileFormat: 'GEOJSON'
    });
  });
};

exportFeatureCollection(Features, LANDSAT_ANUAL);



